---
title: Automatic Calculation of Jacobians and Hessians
subtitle:  through automatic differentiation
format: gfm
editor_options:
  markdown:
    wrap: sentence
execute:
  echo: false
  warning: false
---  

This repository contains a C++ demonstration of the calculation of Jacobians and Hessians through automatic differentiation.
The automatic differentiation is achieved through the use of dual numbers.

## Differentiation through the use of dual numbers

Any analytic real function that can be expressed as a Taylor series can be evaluated with a dual number $x = a + b \epsilon$, with $\epsilon^2 = 0$ (and $\epsilon \ne 0$ ).
The application of this function results in the calculation of the function and its derivative:

$$
\begin{aligned}
f(x) & = f(a + b \epsilon) \\
     & = f(a) + b \frac{df}{dx}(a) \\
     & = f(a) + b f'(a)
\end{aligned}
$$

If in this equation we use $b=1$, we get from a single evaluation of $f$ (which must be implemented using dual numbers) that the evaluation of $f(a,1)$ tells us both $f(a)$ and $f'(a)$.

## C++ types in the library

In this library dual numbers containing component values of type `T` and of dimension `N` are represented by the struct template `Dual<T,N>`.
